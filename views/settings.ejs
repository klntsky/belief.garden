<!-- views/settings.ejs -->
<div class="content">
  <h1>Settings</h1>

  <div class="settings-container">
    <form id="settings-form">
      <div class="setting-item">
        <label>
          <input type="checkbox" id="allowAllDebates" name="allowAllDebates" <%= settings.allowAllDebates ? 'checked' : '' %>>
          Allow replies from other users for all my belief card comments.
        </label>
        <p class="setting-description">
          When enabled, debates can be started on any card, if there is an existing comment.<br><br>
          When disabled, debates can only be started on cards with a comment that contains the words "debate me".

          Note: This only applies to non-banned users.
        </p>
      </div>

      <button type="submit" class="btn">Save Settings</button>
    </form>

    <div class="form-divider"></div>

    <form id="password-form" class="setting-item">
      <h2>Change Password</h2>
      <div id="password-error" class="error-message" style="color: red; display: none;"></div>
      <div class="form-group">
        <label for="oldPassword">Old Password:</label>
        <input type="password" id="oldPassword" name="oldPassword" required />
      </div>
      <div class="form-group">
        <label for="newPassword">New Password:</label>
        <input type="password" id="newPassword" name="newPassword" required />
      </div>
      <button type="submit" class="btn">Change Password</button>
    </form>
  </div>
</div>

<script>
document.getElementById('settings-form').addEventListener('submit', async (e) => {
  e.preventDefault();

  const settings = {
    allowAllDebates: document.getElementById('allowAllDebates').checked
  };

  try {
    const response = await fetch('/api/settings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(settings)
    });

    if (response.ok) {
      Toastify({
        text: "Settings saved successfully!",
        duration: 3000,
        gravity: "top",
        position: "right",
        style: { background: "#4CAF50" }
      }).showToast();
    } else {
      throw new Error('Failed to save settings');
    }
  } catch (error) {
    console.error('Error saving settings:', error);
    Toastify({
      text: "Failed to save settings",
      duration: 3000,
      gravity: "top",
      position: "right",
      style: { background: "#ff0000" }
    }).showToast();
  }
});

document.getElementById('password-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const oldPassword = document.getElementById('oldPassword').value;
  const newPassword = document.getElementById('newPassword').value;
  const errorElement = document.getElementById('password-error');

  try {
    const response = await fetch('/api/change-password', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ oldPassword, newPassword })
    });

    const data = await response.json();

    if (response.ok) {
      // Clear the form
      document.getElementById('oldPassword').value = '';
      document.getElementById('newPassword').value = '';
      errorElement.style.display = 'none';

      Toastify({
        text: "Password changed successfully!",
        duration: 3000,
        gravity: "top",
        position: "right",
        style: { background: "#4CAF50" }
      }).showToast();
    } else {
      errorElement.textContent = data.error || 'Failed to change password';
      errorElement.style.display = 'block';
    }
  } catch (error) {
    console.error('Error changing password:', error);
    errorElement.textContent = 'Failed to change password';
    errorElement.style.display = 'block';
  }
});
</script>

<style>
.settings-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

.setting-item {
  margin-bottom: 20px;
  padding: 15px;
  background: #f5f5f5;
  border-radius: 5px;
}

.setting-description {
  margin-top: 10px;
  color: #666;
  font-size: 0.9em;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
}

.form-group input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.form-divider {
  margin: 30px 0;
  border-top: 1px solid #ddd;
}

.btn {
  padding: 8px 16px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.btn:hover {
  background-color: #45a049;
}

.error-message {
  margin-bottom: 15px;
  padding: 10px;
  background-color: #ffebee;
  border-radius: 4px;
}
</style>
