<!-- views/settings.ejs -->
<div class="content">
  <h1>Settings</h1>

  <div class="settings-container">
    <form id="settings-form">
      <div class="setting-item">
        <label>
          <input type="checkbox" id="allowAllDebates" name="allowAllDebates" <%= settings.allowAllDebates ? 'checked' : '' %>>
          Allow replies from other users for all my belief card comments.
        </label>
        <p class="setting-description">
          When enabled, debates can be started on any card, if there is an existing comment.<br><br>
          When disabled, debates can only be started on cards with a comment that contains the words "debate me".

          Note: This only applies to non-banned users.
        </p>
      </div>

      <button type="submit" class="btn">Save Settings</button>
    </form>

    <div class="form-divider"></div>

    <form id="password-form" class="setting-item">
      <h2>Change Password</h2>
      <div id="password-error" class="error-message" style="color: red; display: none;"></div>
      <div class="form-group">
        <label for="oldPassword">Old Password:</label>
        <input type="password" id="oldPassword" name="oldPassword" required />
      </div>
      <div class="form-group">
        <label for="newPassword">New Password:</label>
        <input type="password" id="newPassword" name="newPassword" required />
      </div>
      <button type="submit" class="btn">Change Password</button>
    </form>

    <div class="form-divider"></div>

    <div class="setting-item">
      <h2>User Bans</h2>
      <form id="banForm" class="ban-form">
        <div class="form-group">
          <label for="username">Username to ban:</label>
          <input type="text" id="username" name="username" required>
        </div>

        <div class="form-group">
          <label>
            <input type="checkbox" id="deleteReplies" name="deleteReplies">
            Delete all replies by this user on my profile
          </label>
        </div>

        <button type="submit" class="btn">Ban User</button>
      </form>

      <div id="current-bans" class="current-bans">
        <h3>Current Bans</h3>
        <div id="bans-list">
          <!-- Will be populated by JavaScript -->
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.getElementById('settings-form').addEventListener('submit', async (e) => {
  e.preventDefault();

  const settings = {
    allowAllDebates: document.getElementById('allowAllDebates').checked
  };

  try {
    const response = await fetch('/api/settings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(settings)
    });

    if (response.ok) {
      Toastify({
        text: "Settings saved successfully!",
        duration: 3000,
        gravity: "top",
        position: "right",
        style: { background: "#4CAF50" }
      }).showToast();
    } else {
      throw new Error('Failed to save settings');
    }
  } catch (error) {
    console.error('Error saving settings:', error);
    Toastify({
      text: "Failed to save settings",
      duration: 3000,
      gravity: "top",
      position: "right",
      style: { background: "#ff0000" }
    }).showToast();
  }
});

document.getElementById('password-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const oldPassword = document.getElementById('oldPassword').value;
  const newPassword = document.getElementById('newPassword').value;
  const errorElement = document.getElementById('password-error');

  try {
    const response = await fetch('/api/change-password', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ oldPassword, newPassword })
    });

    const data = await response.json();

    if (response.ok) {
      // Clear the form
      document.getElementById('oldPassword').value = '';
      document.getElementById('newPassword').value = '';
      errorElement.style.display = 'none';

      Toastify({
        text: "Password changed successfully!",
        duration: 3000,
        gravity: "top",
        position: "right",
        style: { background: "#4CAF50" }
      }).showToast();
    } else {
      errorElement.textContent = data.error || 'Failed to change password';
      errorElement.style.display = 'block';
    }
  } catch (error) {
    console.error('Error changing password:', error);
    errorElement.textContent = 'Failed to change password';
    errorElement.style.display = 'block';
  }
});

// Bans functionality
async function loadBans() {
  try {
    const response = await fetch('/api/bans');
    if (!response.ok) {
      throw new Error('Failed to load bans');
    }
    const bans = await response.json();

    const bansList = document.getElementById('bans-list');
    bansList.innerHTML = '';

    if (bans.length === 0) {
      bansList.innerHTML = '<p>No active bans</p>';
      return;
    }

    bans.forEach(ban => {
      const banItem = document.createElement('div');
      banItem.className = 'ban-item';

      const username = document.createElement('span');
      username.textContent = ban.username;

      const unbanLink = document.createElement('a');
      unbanLink.href = '#';
      unbanLink.className = 'unban-link';
      unbanLink.textContent = 'Unban';
      unbanLink.onclick = async (e) => {
        e.preventDefault();
        if (confirm(`Are you sure you want to unban ${ban.username}?`)) {
          try {
            const response = await fetch('/api/unban-user', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                bannedUser: ban.username
              })
            });

            if (!response.ok) {
              throw new Error('Failed to unban user');
            }

            loadBans(); // Reload the bans list
            Toastify({
              text: `Successfully unbanned ${ban.username}`,
              duration: 3000,
              gravity: "top",
              position: "right",
              style: { background: "#4CAF50" }
            }).showToast();
          } catch (error) {
            Toastify({
              text: error.message,
              duration: 3000,
              gravity: "top",
              position: "right",
              style: { background: "#ff0000" }
            }).showToast();
          }
        }
      };

      banItem.appendChild(username);
      banItem.appendChild(unbanLink);
      bansList.appendChild(banItem);
    });
  } catch (error) {
    console.error('Error loading bans:', error);
    document.getElementById('bans-list').innerHTML = '<p>Failed to load bans</p>';
  }
}

document.getElementById('banForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const username = document.getElementById('username').value;
  const deleteReplies = document.getElementById('deleteReplies').checked;

  try {
    const response = await fetch('/api/ban-user', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        bannedUser: username,
        deleteReplies
      })
    });

    if (!response.ok) {
      throw new Error('Failed to ban user');
    }

    // Clear the form
    document.getElementById('username').value = '';
    document.getElementById('deleteReplies').checked = false;

    // Reload the bans list
    loadBans();

    Toastify({
      text: `Successfully banned ${username}`,
      duration: 3000,
      gravity: "top",
      position: "right",
      style: { background: "#4CAF50" }
    }).showToast();
  } catch (error) {
    console.error('Error banning user:', error);
    Toastify({
      text: error.message,
      duration: 3000,
      gravity: "top",
      position: "right",
      style: { background: "#ff0000" }
    }).showToast();
  }
});

// Load bans when the page loads
document.addEventListener('DOMContentLoaded', loadBans);
</script>

<script>
// Handle ban parameter in URL
document.addEventListener('DOMContentLoaded', () => {
  const urlParams = new URLSearchParams(window.location.search);
  const banUser = urlParams.get('ban');
  if (banUser) {
    document.getElementById('username').value = banUser;
    // Wait a bit for everything to settle
    setTimeout(() => {
      const banForm = document.getElementById('username');
      if (banForm) {
        banForm.scrollIntoView({ behavior: 'smooth', block: 'center' });
        banForm.focus();
      }
    }, 100);
  }
});

</script>

<style>
.settings-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

.setting-item {
  margin-bottom: 20px;
  padding: 15px;
  background: #f5f5f5;
  border-radius: 5px;
}

.setting-description {
  margin-top: 10px;
  color: #666;
  font-size: 0.9em;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
}

.form-group input[type="text"],
.form-group input[type="password"] {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  margin: 5px 0;
  background: #fff;
  border-radius: 4px;
  border: 1px solid #ddd;
}

.form-divider {
  margin: 30px 0;
  border-top: 1px solid #ddd;
}

.btn {
  padding: 8px 16px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.btn:hover {
  background-color: #45a049;
}

.error-message {
  margin-bottom: 15px;
  padding: 10px;
  background-color: #ffebee;
  border-radius: 4px;
}

.ban-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  margin: 5px 0;
  background: #fff;
  border-radius: 4px;
  border: 1px solid #ddd;
}

.unban-link {
  color: #f44336;
  text-decoration: none;
  padding: 4px 8px;
  border-radius: 4px;
}

.unban-link:hover {
  background-color: #ffebee;
}

.current-bans {
  margin-top: 20px;
}

#bans-list {
  margin-top: 10px;
}
</style>
